
default partial alphanumeric_keys
xkb_symbols "us" {
    
    include "us(basic)"
    name[Group1]= "US - My custom";
    
    include "mine(somestuff)"
    
    key <AE01> { [ exclam,      1 ] };
    key <AE02> { [ at,          2 ] };
    key <AE03> { [ numbersign,  3 ] };
    key <AE04> { [ dollar,      4 ] };
    key <AE05> { [ percent,     5 ] };
    key <AE06> { [ asciicircum, 6 ] };
    key <AE07> { [ ampersand,   7 ] };
    key <AE08> { [ asterisk,    8 ] };
    key <AE09> { [ parenleft,   9 ] };
    key <AE10> { [ parenright,  0 ] };
    
    include "mine(hackus)"
};

partial alphanumeric_keys
xkb_symbols "ru" {
    
    include "ru(winkeys)"
    name[Group1]= "RU - My custom";
    
    include "mine(somestuff)"
    
    key <AE01> { [ exclam,     1 ] };
    key <AE02> { [ quotedbl,   2 ] };
    key <AE03> { [ numerosign, 3 ] };
    key <AE04> { [ semicolon,  4 ] };
    key <AE05> { [ percent,    5 ] };
    key <AE06> { [ colon,      6 ] };
    key <AE07> { [ question,   7 ] };
    key <AE08> { [ asterisk,   8 ] };
    key <AE09> { [ parenleft,  9 ] };
    key <AE10> { [ parenright, 0 ] };
    
    include "mine(hackru)"
};

// almost as original system layout
partial alphanumeric_keys
xkb_symbols "origus" {
    include "us(basic)"
    name[Group1]= "US - Original";
    include "mine(somestuff)"
    include "mine(hackus)"
};

// almost as original system layout
partial alphanumeric_keys
xkb_symbols "origru" {
    include "ru(winkeys)"
    name[Group1]= "RU - Original";
    include "mine(somestuff)"
    include "mine(hackru)"
};

partial alphanumeric_keys
xkb_symbols "hackus" {
    
    key.type[group1]="THREE_LEVEL";
    
    // arrow keys (like vim)
    key <AC06> { [ h, H, Left ] };
    key <AC07> { [ j, J, Down ] };
    key <AC08> { [ k, K, Up ] };
    key <AC09> { [ l, L, Right ] };
    
    // page up and page down (like vim)
    key <AD07> { [ u, U, Prior ] };
    key <AC03> { [ d, D, Next ] };
    
    // home and end
    key <AC04> { [ f, F, End ] };
    key <AB05> { [ b, B, Home ] };
    
    // backspace and delete by [ and ]
    key <AD11> { [ bracketleft,  braceleft,  BackSpace ] };
    key <AD12> { [ bracketright, braceright, Delete ] };
    
    // insert
    key <AD08> { [ i, I, Insert ] };
    
    // contextual menu
    key <AB07> { [ m, M, Menu ] };
};

partial alphanumeric_keys
xkb_symbols "hackru" {
    key.type[group1]="THREE_LEVEL";
    
    // arrow keys (like vim)
    key <AC06> { [ Cyrillic_er, Cyrillic_ER, Left ] };
    key <AC07> { [ Cyrillic_o,  Cyrillic_O,  Down ] };
    key <AC08> { [ Cyrillic_el, Cyrillic_EL, Up ] };
    key <AC09> { [ Cyrillic_de, Cyrillic_DE, Right ] };
    
    // page up and page down (like vim)
    key <AD07> { [ Cyrillic_ghe, Cyrillic_GHE, Prior ] };
    key <AC03> { [ Cyrillic_ve,  Cyrillic_VE,  Next ] };
    
    // home and end
    key <AC04> { [ Cyrillic_a, Cyrillic_A, End ] };
    key <AB05> { [ Cyrillic_i, Cyrillic_I, Home ] };
    
    // backspace and delete by [ and ]
    key <AD11> { [ Cyrillic_ha,       Cyrillic_HA,       BackSpace ] };
    key <AD12> { [ Cyrillic_hardsign, Cyrillic_HARDSIGN, Delete ] };
    
    // insert
    key <AD08> { [ Cyrillic_sha, Cyrillic_SHA, Insert ] };
    
    // contextual menu
    key <AB07> { [ Cyrillic_softsign, Cyrillic_SOFTSIGN, Menu ] };
};

// non lang-specific keys
hidden partial alphanumeric_keys
xkb_symbols "somestuff" {
    
    replace key <CAPS> { [ Control_L, Control_L ] };
    modifier_map Control { <CAPS>, <LCTL> };
    
    # switch layout by both shifts
    key <LFSH> { [ Shift_L, ISO_Prev_Group ] };
    key <RTSH> { [ Shift_R, ISO_Next_Group ] };
    
    // apple keyboard key near left shift
    key <LSGT> { [ Shift_L, ISO_Prev_Group ] };
    
    // for hacking
    key <LVL3> {
        type[Group1]="ONE_LEVEL",
        symbols[Group1] = [ ISO_Level3_Shift ]
    };
    modifier_map Mod5 { ISO_Level3_Shift };
};

// vim: set et ts=4 sts=4 sw=4 :
